type HashTag {
	id: Int!
	name: String!
	createdAt: String!
	updatedAt: String!
	EventId: ID!
}

type Event {
	id: Int!
	eventCode: String!
	eventName: String!
	moderationOption: Boolean!
	replyOption: Boolean!
	createdAt: String!
	updatedAt: String!
	startAt: String!
	endAt: String!
	HostId: ID!
	HashTags: [HashTag]
}

type EventOption {
	moderationOption: Boolean!
	replyOption: Boolean!
}

type Host {
	id: Int!
	oauthId: ID!
	name: String!
	email: String!
	emailFeedBack: Boolean!
	image: String!
}

type InitData {
	events: [Event]!
	host: Host!
}

input EventInfo {
	HostId: ID!
	eventName: String!
	startAt: String!
	endAt: String!
}

input HashTagInput {
	name: String!
	EventId: ID!
}

input EventUpdate {
	eventName: String!
	startAt: String!
	endAt: String!
	EventId: ID!
}

type Mutation {
	createEvent(info: EventInfo!): Event
	createHashTags(hashTags: [HashTagInput]!): HashTag
	updateEvent(event: EventUpdate!): Event
}

type Query {
	events: [Event]!
	init: InitData!
	getEventOption(EventId: ID!): EventOption!
}

type Mutation {
	moderation(eventId: Int!, moderationOption: Boolean!): Int!
}
